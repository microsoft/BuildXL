parameters:
- name: isRollingBuild
  type: boolean
  default: true

jobs:
- job: PublishBinaries
  displayName: 'AzDev Hosted: Publish build binaries'
  timeoutInMinutes: 240
  variables:
    LargePackagesStagingDir: $(Agent.TempDirectory)/largeNupkgs
    # Duplicate packages can be skipped when retrying
    NugetPushAllowPackageConflicts: $[ gt(variables['System.JobAttempt'], 1) ]
  pool:
    name: BuildXL-DevOpsAgents-Selfhost-BuildCache
    os: windows
    image: 1ESPT-Win2022-PME-3
    vhd:
      enabled: false
  templateContext:
    sdl:
      baseline:
        baselineFile: $(Build.SourcesDirectory)\.config\guardian\.gdnbaselines
      binskim:
        scanOutputDirectoryOnly: true
        preReleaseVersion: '4.3.1'
        # Only scan the releases directory, buildxl binaries are in releases directory.
        # Exclude SDK binaries as well, binskim 4.3.1 reports errors on SDK dependencies.
        # Exclude linux binaries. Binskim 4.3.1 reports errors on linux dependencies microsoft binaries. Also prevent potential issue with running binskim for linux binaries on Windows.
        analyzeTargetGlob: '+:file|$(Agent.TempDirectory)\DownloadedDrop\release\**\*.dll;+:file|$(Agent.TempDirectory)\DownloadedDrop\release\**\*.exe;-:f|$(Agent.TempDirectory)\DownloadedDrop\release\**\linux-x64\**\*.*;-:f|$(Agent.TempDirectory)\DownloadedDrop\release\**\Sdk\**\*.*'
    outputParentDirectory: $(Agent.TempDirectory)/DownloadedDrop
    outputs:
    - output: artifactsDrop
      displayName: 'ðŸ“¤ Publish BuildXL to mseng Artifact Services Drop (mseng.visualstudio.com)'
      dropServiceURI: https://mseng.artifacts.visualstudio.com/DefaultCollection
      buildNumber: buildxl.dogfood.$(Build.BuildNumber)
      sourcePath: $(Agent.TempDirectory)/DownloadedDrop
      detailedLog: true
      retentionDays: 180
      dropMetadataContainerName: DropMetadata-mseng
      sbomEnabled: false
      condition: or(succeeded(), eq(variables['IsRetryRun'], true))

    - output: artifactsDrop
      displayName: 'ðŸ“¤ Publish BuildXL to CB Artifact Services Drop (cloudbuild.visualstudio.com)'
      dropServiceURI: https://cloudbuild.artifacts.visualstudio.com/DefaultCollection
      buildNumber: buildxl.dogfood.$(Build.BuildNumber)
      sourcePath: $(Agent.TempDirectory)/DownloadedDrop
      detailedLog: true
      usePat: false
      retentionDays: 180
      dropMetadataContainerName: DropMetadata-cloudbuild
      sbomEnabled: false
      condition: or(succeeded(), eq(variables['IsRetryRun'], true))

    - output: nuget
      displayName: 'ðŸ“¦ Push private NuGet packages to 1essharedassets/BuildXL.Internal feed'
      packageParentPath: $(Agent.TempDirectory)/DownloadedDrop/release/private/pkgs 
      packagesToPush: $(Agent.TempDirectory)/DownloadedDrop/release/private/pkgs/*.nupkg
      nuGetFeedType: external
      publishFeedCredentials: 'mseng-Domino-BuildXL-1ESSharedAssets_BuildXL.Internal'
      sbomEnabled: false
      allowPackageConflicts: $(NugetPushAllowPackageConflicts)
      condition: or(succeeded(), eq(variables['IsRetryRun'], true))

    - output: nuget
      displayName: 'ðŸ“¦ Push public NuGet packages to 1essharedassets/BuildXL feed'
      condition: and(or(succeeded(), eq(variables['IsRetryRun'], true)), ne(variables['ServicingOnlyBuild'], 'true'))
      packageParentPath: $(Agent.TempDirectory)/DownloadedDrop/release/pkgs 
      packagesToPush: $(Agent.TempDirectory)/DownloadedDrop/release/pkgs/*.nupkg
      nuGetFeedType: external
      publishFeedCredentials: 'mseng-Domino-BuildXL-1ESSharedAssets_BuildXL'
      sbomEnabled: false
      allowPackageConflicts: $(NugetPushAllowPackageConflicts)

  steps:
  # Set access token to pull/push artifacts from CB and mseng.
  - template: /.azdo/common/generate-access-token.yml
    parameters:
      AccessTokenVariable: BuildXL-Pipeline-AccessToken

  - template: /.azdo/common/set-artifacts-pat.yml
    parameters:
      AzDevPAT: $(BuildXL-Pipeline-AccessToken)

  - task: ms-vscs-artifact.build-tasks.artifactDropDownloadTask-1.artifactDropDownloadTask@0
    displayName: 'ðŸ“¥ Download candidate BuildXL'
    inputs:
      dropMetadataContainerName: SecondBuildFull
      dropServiceURI: ''
      destinationPath: $(Agent.TempDirectory)/DownloadedDrop
      usePat: false

  - task: AzureArtifacts.drop-validator-task.drop-validator-task.DropValidatorTask@0
    displayName: Drop Validator (Build Manifest Validation)
    inputs:
      BuildDropPath: $(Agent.TempDirectory)/DownloadedDrop
      OutputPath: $(Agent.TempDirectory)/Output
      ValidateSignature: true
      Verbosity: Verbose

  - task: PowerShell@2
    displayName: Print Drop Validator Result
    inputs:
      targetType: inline
      script: get-content $(Agent.TempDirectory)/Output
      errorActionPreference: continue
  
  - task: PowerShell@2
    displayName: SBOM Validation
    inputs:
      filePath: Shared/Scripts/SBOMValidation.ps1
      arguments: -SBOMManifestFile  $(Agent.TempDirectory)/DownloadedDrop/_manifest/spdx_2.2/manifest.spdx.json -BcdeOutputFile  $(Agent.TempDirectory)/DownloadedDrop/_manifest/bcde-output.json

  - ${{ if eq(parameters.isRollingBuild, true) }}:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: Write-Host "##vso[build.addbuildtag]RollingRelease"
      displayName: Tag build for consumption in release pipeline

  # Add MacOS and Linux artifacts to the DownloadedDrop directory, so they will be included in the
  # final drop produced by this pipeline. This way the release pipeline has everything it needs in
  # a single drop.
  #
  # TODO: In the following drop download task, 'usePat' is set to false.
  #       May be this can be removed (or set to true) because the system access token should be sufficient.
  #       Note that, when set to 'false', the task will use the environment variable 'ArtifactServices.Drop.PAT' set by set-artifacts-pat.yml,
  #       otherwise, it will use the system access token. Because the following drop download tasks are downloading from the same organization,
  #       the system access token should be (in theory) sufficient.
  - ${{ if eq(parameters.isRollingBuild, true) }}:
    - task: ms-vscs-artifact.build-tasks.artifactDropDownloadTask-1.artifactDropDownloadTask@0
      displayName: 'ðŸ“¥ Download MacOS Runtime NuGet Package'
      inputs:
        dropMetadataContainerName: DropMetadata-MacOS-Intermediate
        dropServiceURI: ''
        destinationPath: $(Agent.TempDirectory)/DownloadedDrop
        usePat: false # TODO: May be this can be removed (or set to true) because system access token is sufficient.

  - task: ms-vscs-artifact.build-tasks.artifactDropDownloadTask-1.artifactDropDownloadTask@1
    displayName: 'ðŸ“¥ Download Internal Linux Intermediate Artifacts'
    inputs:
      dropMetadataContainerName: DropMetadata-Linux-Intermediate-Internal
      dropServiceURI: ''
      destinationPath: $(Agent.TempDirectory)/DownloadedDrop
      usePat: false

  # Deletes outputs not needed in order to reduce the files sent to SDL binary scanning
  # This filtering needs to be done after the drop validator task otherwise that would fail
  - task: PowerShell@2
    displayName: 'Delete extra outputs'
    inputs:
      targetType: 'inline'
      script: |
        Remove-Item -Path "$(Agent.TempDirectory)/DownloadedDrop/debug" -Recurse -Force
      errorActionPreference: 'continue'

  # Use VstsNugetPush to push our large packages
  - task: PowerShell@2
    displayName: Download VstsNugetPush.exe
    inputs:
      targetType: 'filePath'
      filePath: '$(Build.SourcesDirectory)/.azdo/scripts/DownloadVstsNugetPush.ps1'
      arguments: '-toolsDirectory $(Agent.ToolsDirectory) -tempDirectory $(Agent.TempDirectory)/vstsnugetpush'
    env:
      ACCESS_TOKEN: $(BuildXL-Pipeline-AccessToken)

  - task: PowerShell@2
    displayName: 'Move large NuGet Packages'
    inputs:
      targetType: 'inline'
      script: |
        $windowsPkg = "$(Agent.TempDirectory)\DownloadedDrop\release\pkgs\BuildXL.win-x64.$(Build.BuildNumber).nupkg"
        $linuxPkg = "$(Agent.TempDirectory)\DownloadedDrop\release\pkgs\BuildXL.linux-x64.$(Build.BuildNumber).nupkg"
        $destinationDir = "$(LargePackagesStagingDir)"

        New-Item -ItemType Directory -Path $destinationDir -Force
        $pkgs = @($windowsPkg, $linuxPkg)
        foreach ($pkg in $pkgs) {
          if (Test-Path -Path $pkg) {
            Move-Item -Path $pkg -Destination $destinationDir -Force
            Write-Host "Successfully moved $pkg to $destinationDir"
          } else {
            Write-Error "nupkg not found: $pkg"
            exit 1
          }
        }
      errorActionPreference: 'continue'

  # The packages are correctly set up to be pushed - on retry runs, we will try to do it even if intermediate steps fail (which can happen due to name conflicts, etc).
  - powershell: |
      Write-Host "##vso[task.setvariable variable=IsRetryRun]true"
    displayName: 'Set IsRetryRun variable for publishing on retry'
    condition: and(succeeded(), gt(variables['System.JobAttempt'], 1))

  # Upload to pipeline artifacts so we get the required scanning
  - task: 1ES.PublishPipelineArtifact@1
    inputs:
      targetPath: $(LargePackagesStagingDir)()
      artifactName: BuildXL engine packages $(System.JobAttempt)

  - task: PowerShell@2
    displayName: 'Publish large NuGet Packages with VstsNugetPush.exe'
    condition: or(succeeded(), eq(variables['IsRetryRun'], true))
    inputs:
      targetType: 'inline'
      script: |
        # Run VstsNugetPush.exe to publish the packages
        & '$(Agent.ToolsDirectory)/VstsNugetPush/VstsNugetPush.exe' -Package "$(LargePackagesStagingDir)\BuildXL.win-x64.$(Build.BuildNumber).nupkg" -Feed "https://1essharedassets.pkgs.visualstudio.com/_packaging/BuildXL/nuget/v3/index.json" -NonInteractive -Verbosity Detailed
        & '$(Agent.ToolsDirectory)/VstsNugetPush/VstsNugetPush.exe' -Package "$(LargePackagesStagingDir)\BuildXL.linux-x64.$(Build.BuildNumber).nupkg" -Feed "https://1essharedassets.pkgs.visualstudio.com/_packaging/BuildXL/nuget/v3/index.json" -NonInteractive -Verbosity Detailed
      errorActionPreference: 'continue'
    env:
      VSTSNUGETPUSH_ARTIFACTTOOL_PAT_HANDOFF: $(BuildXL-Pipeline-AccessToken)

  # Set NuGet endpoints for the feeds we are going to push to. The NuGet push tasks are injected by 1ESPT using the 'output: nuget' context.
  - template: /.azdo/common/set-nuget-endpoint.yml
    parameters:
      NuGetServiceConnectionId: 'bf3972a0-77c4-4dd8-8f89-cf4399bc0658'
      NuGetServiceConnectionName: 'mseng-Domino-BuildXL-1ESSharedAssets_BuildXL.Internal'
      AccessToken: $(BuildXL-Pipeline-AccessToken)
      condition: or(succeeded(), eq(variables['IsRetryRun'], true))

  - template: /.azdo/common/set-nuget-endpoint.yml
    parameters:
      NuGetServiceConnectionId: 'af9cb8db-5f2f-4b3e-b436-e1ff62614888'
      NuGetServiceConnectionName: 'mseng-Domino-BuildXL-1ESSharedAssets_BuildXL'
      AccessToken: $(BuildXL-Pipeline-AccessToken)
      condition: or(succeeded(), eq(variables['IsRetryRun'], true))

- ${{ if eq(parameters.isRollingBuild, true) }}:
  - job: GitHubForcePush
    displayName: Force Push BuildXL.Internal to GitHub Main
    timeoutInMinutes: 180
    # Only force push the main branch
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    pool:
      name: BuildXL-DevOpsAgents-Selfhost-BuildCache
      os: windows
      image: 1ESPT-Win2022-PME-3
    steps:
    - task: PowerShell@2
      displayName: Force push to GitHub master SSH
      inputs:
        filePath: Shared/Scripts/github/PushToGHWithDeployKey.ps1
        arguments: '"$(Github-DeployKey-PrivateKey)" "$(Github-DeployKey-PublicKey)" "$(Build.SourcesDirectory)\Shared\Scripts\github\known_hosts"'
