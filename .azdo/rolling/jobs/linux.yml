jobs:
# Builds eBPF Sandbox binaries to be consumed by the next step.
# This is necessary because building the eBPF sandbox requires kernel 6.6+
# Supported OS: Ubuntu 22.04 or newer, or Azure Linux 3.0 or newer.
# This task runs a filtered build to only build the eBPF Sandbox binaries.
- job: Linux_Internal_eBPF
  displayName: Linux Internal eBPF Build
  timeoutInMinutes: 180

  # This pool must be a Ubuntu 22.04 or newer to build eBPF Sandbox binaries.
  pool:
    name: BuildXL-DevOpsAgents-Selfhost-BuildCache
    image: ubuntu-22.04-PME-GPT
    os: linux

  templateContext:
    sdl:
      binskim:
        preReleaseVersion: '' # Use old version of binskim for Linux builds, binskim 4.3.1 has issues running on Linux
    outputs:
      - output: artifactsDrop
        displayName: Publish Intermediate Linux eBPF binaries to Drop
        dropServiceURI: https://mseng.artifacts.visualstudio.com/DefaultCollection
        buildNumber: BuildXL/Linux/Internal/eBPF/$(Build.BuildNumber)/$(Build.BuildId)
        sourcePath: $(Build.SourcesDirectory)/Out/Bin
        retentionDays: 1
        dropMetadataContainerName: DropMetadata-Linux-eBPF-Internal

      - output: buildArtifacts
        displayName: Publish build logs
        condition: succeededOrFailed()
        PathtoPublish: $(Build.SourcesDirectory)/Out/Logs/Build
        ArtifactName: linuxbuildlogs-internal-ebpf
        sbomEnabled: false    # SBOM is not needed for logs

  steps:
  - template: ../steps/linux_prepare.yml
    parameters:
      CacheNamespace: BuildXLSelfhost.Linux

  - task: Bash@3
    displayName: Build Linux eBPF Sandbox Binaries
    inputs:
      targetType: inline
      script: >
        set -eu

        bash bxl.sh --internal --shared-comp
        "/f:output='*/linux-x64/bxl-ebpf-runner'"
        /cacheMiss:Bxl.Selfhost.Linux.eBPF
        /cacheConfigFilePath:Out/CacheConfig.json
        /logoutput:FullOutputOnError
        /logsDirectory:"Out/Logs/Build"
        /q:ReleaseLinux
        /q:DebugLinux
      workingDirectory: /home/subst
    env:
      PAT1esSharedAssets: $(BuildXL-Pipeline-AccessToken)
      PATCloudBuild: $(BuildXL-Pipeline-AccessToken)
      VSTSPERSONALACCESSTOKEN: $(System.AccessToken)

# This part of the build will pick up the eBPF Sandbox binaries built in the previous step.
# This step may be built with an older kernel version if needed.
- job: Linux_Internal
  displayName: Linux Internal Build
  timeoutInMinutes: 180
  dependsOn: Linux_Internal_eBPF

  pool:
    name: BuildXL-DevOpsAgents-Selfhost-BuildCache
    image: ubuntu-22.04-PME-GPT
    os: linux

  templateContext:
    sdl:
      binskim:
        preReleaseVersion: '' # Use old version of binskim for Linux builds, binskim 4.3.1 has issues running on Linux
    outputs:
      - output: artifactsDrop
        displayName: Publish Intermediate Linux Debug/Release binaries to Drop
        dropServiceURI: https://mseng.artifacts.visualstudio.com/DefaultCollection
        buildNumber: BuildXL/Linux/Internal/Intermediate/$(Build.BuildNumber)/$(Build.BuildId)
        sourcePath: $(Build.SourcesDirectory)/Out/Bin
        retentionDays: 1
        dropMetadataContainerName: DropMetadata-Linux-Intermediate-Internal
      
      - output: buildArtifacts
        displayName: Publish build logs
        condition: succeededOrFailed()
        PathtoPublish: $(Build.SourcesDirectory)/Out/Logs/Build
        ArtifactName: linuxbuildlogs-internal
        sbomEnabled: false    # SBOM is not needed for logs

  steps:
  - template: ../steps/linux_prepare.yml
    parameters:
      CacheNamespace: BuildXLSelfhost.Linux

  - task: ms-vscs-artifact.build-tasks.artifactDropDownloadTask-1.artifactDropDownloadTask@1
    displayName: 'ðŸ“¥ Download eBPF Artifacts'
    inputs:
      dropMetadataContainerName: DropMetadata-Linux-eBPF-Internal
      dropServiceURI: ''
      destinationPath: $(Build.StagingDirectory)/Linux.eBPF
      usePat: true
      entraServiceConnection: mseng-Domino-BuildXL-Pipelines

  - task: Bash@3
    displayName: Build new LKG
    inputs:
      targetType: inline
      script: >
        set -eu

        bash bxl.sh --internal --minimal --deploy-dev --release --shared-comp
        /cacheMiss:Bxl.Selfhost.Linux
        /cacheConfigFilePath:Out/CacheConfig.json
        /logoutput:FullOutputOnError
        /logsDirectory:"Out/Logs/Build"
      workingDirectory: /home/subst
    env:
      PAT1esSharedAssets: $(BuildXL-Pipeline-AccessToken)
      PATCloudBuild: $(BuildXL-Pipeline-AccessToken)
      VSTSPERSONALACCESSTOKEN: $(System.AccessToken)
      # CODESYNC: Public/Src/Sandbox/Linux/ebpf/deployment.dsc
      BuildXLEbpfSandboxDeploymentOverridePath: $(Build.StagingDirectory)/Linux.eBPF

  # Acquire another token because the previous one may have been expired.
  - template: /.azdo/common/generate-access-token.yml
    parameters:
      AccessTokenVariable: BuildXL-Pipeline-AccessToken

  - task: Bash@3
    displayName: Build Debug/Release Binaries for Drop/Nuget/NPM using LKG
    inputs:
      targetType: inline
      script: >-
        set -eu

        bash bxl.sh --use-dev --shared-comp --internal
        /cacheMiss:Bxl.Selfhost.Linux
        /cacheConfigFilePath:Out/CacheConfig.json
        /logoutput:FullOutputOnError
        /logsDirectory:"Out/Logs/Build"
        /p:Build.BuildId=$(Build.BuildNumber)
        /p:[BuildXL.Branding]SourceIdentification=$(Branding_SourceIdentification)
        /q:DebugLinuxNet9
        /q:ReleaseLinuxNet9
        "/f:output='/home/subst/Out/Bin/*'ortag='test'"
      workingDirectory: /home/subst
    env:
      PAT1esSharedAssets: $(BuildXL-Pipeline-AccessToken)
      PATCloudBuild: $(BuildXL-Pipeline-AccessToken)
      VSTSPERSONALACCESSTOKEN: $(System.AccessToken)
      # CODESYNC: Public/Src/Sandbox/Linux/ebpf/deployment.dsc
      BuildXLEbpfSandboxDeploymentOverridePath: $(Build.StagingDirectory)/Linux.eBPF

  # Delete all linux outputs that aren't eventually published to save SDL scanning costs
  # This leaves out/bin/release/npm and out/bin/release/pkgs which eventually get published
  # Still build everything for sake of ensuring it still builds
  - task: Bash@3
    displayName: Clean bin directory for Drop
    inputs:
      targetType: inline
      script: |
        set -eu
        rm -rf Out/Bin/debug
        rm -rf Out/Bin/Demos
        rm -rf Out/Bin/net8.0
        rm -rf Out/Bin/net9.0
        rm -rf Out/Bin/release/cache
        rm -rf Out/Bin/release/ide
        rm -rf Out/Bin/release/linux-x64
        rm -rf Out/Bin/release/tools
        du -h --max-depth=4 Out/Bin
      workingDirectory: /home/subst