parameters:
# If this parameter is false, publishing is skipped
# and the release pipeline won't be triggered
# CODESYNC: Don't remove or rename this parameter without first updating 
#           the 1ESPT pipeline that is queuing a build and passing it.
- name: triggerReleasePipeline
  type: boolean
  default: true

trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - Documentation
    - Examples
  
variables:
- group: "BuildXL Common variables"
- template: variables.yml
- name: isPublishingBranch
  # We only want to run the publishing stage for main and releases/* branch
  # This condition is to avoid publishing binaries from test runs of the pipeline from custom branches
  value: $[ or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/releases')) ]
- ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/releases') }}:
  # Infer a pre-release tag if the branch is a releases/* branch (patch) and the variable has not been defined.
  # We assume the branch is named 'releases/0.1.0-*******', as per our patch instructions.
  - name: InferredPreReleaseTag
    value: $[ replace(replace(variables['Build.SourceBranch'], 'refs/heads/releases/', ''), '0.1.0-', '') ]

resources:
  repositories:
  - repository: 1esPipelines
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines
  parameters:
    pool:
      name: BuildXL-DevOpsAgents-Selfhost-BuildCache
      os: windows
      image: 1ESPT-Win2022-PME-3
    featureFlags:
      autoBaseline: false
      incrementalSDLBinaryAnalysis: true
    sdl:
      sourceAnalysisPool:
        name: Windows-SDL-Agents
        image: Windows-SDL-Image
        os: windows
      spotBugs:
        enabled: false
      baseline:
        baselineFile: $(Build.SourcesDirectory)\.config\guardian\.gdnbaselines
      codeql:
        compiled:
          enabled: false
          justificationForDisabling: 'CodeQL would not be effective on this pipeline because builds are incremental. We will create a separate clean build pipeline for CodeQL.'
      binskim:
        enabled: true
        scanOutputDirectoryOnly: true
        preReleaseVersion: '4.3.1'
    stages:
    - stage: prepare
      displayName: Set build number
      dependsOn: []
      jobs:
      - template: .azdo/rolling/jobs/set-build-number.yml@self

    - stage: CB
      displayName: CB Validation
      dependsOn: prepare
      jobs:
      - template: .azdo/rolling/jobs/cb.yml@self

    - stage: RCIT
      displayName: RunCheckInTests
      dependsOn: prepare
      jobs:
      - template: .azdo/rolling/jobs/run-checkin-tests.yml@self

    - stage: Linux
      displayName: Linux
      dependsOn: prepare
      jobs:
      - template: .azdo/rolling/jobs/linux.yml@self

    - stage: External
      displayName: Build and validate external bits
      dependsOn: prepare
      variables:
        BuildXL.SemanticVersion: $[ stageDependencies.prepare.SetBuildNumber.outputs['SetBuildNumber.BuildXLSemanticVersion'] ]
        BuildXL.PreReleaseTag: $[ stageDependencies.prepare.SetBuildNumber.outputs['SetBuildNumber.BuildXLPreReleaseTag'] ]
      jobs:
      - template: .azdo/rolling/jobs/external.yml@self

    - stage: Mac
      displayName: Mac
      dependsOn: prepare
      jobs:
      - template: .azdo/rolling/jobs/mac.yml@self
    
    - stage: publish
      displayName: Publish
      variables:
      - group: "BuildXL GitHub Secrets"
      dependsOn: [CB, RCIT, External, Linux, Mac]
      condition: and(succeeded(), eq(${{ parameters.triggerReleasePipeline }}, true), eq(variables.isPublishingBranch, true))
      jobs:
      - template: .azdo/rolling/jobs/publish.yml@self
